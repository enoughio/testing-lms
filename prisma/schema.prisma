// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          UserRole  @default(MEMBER)
  avatar        String?
  bio           String?
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  memberships       Membership[]
  seatBookings      SeatBooking[]
  bookBorrowings    BookBorrowing[]
  eBookAccesses     EBookAccess[]
  forumPosts        ForumPost[]
  forumComments     ForumComment[]
  studySessions     StudySession[]
  tasks             Task[]
  habits            Habit[]
  notifications     Notification[]
  payments          Payment[]
  adminOf           Library?         @relation("LibraryAdmin")
  libraryStaff      LibraryStaff[]
  studyStreak       StudyStreak?
  readingHistory    ReadingHistory[]
  bookmarks         Bookmark[]
  notes             Note[]
  reviews           Review[]
  
  @@map("users")
}

enum UserRole {
  MEMBER
  ADMIN
  SUPER_ADMIN
}

// Library model
model Library {
  id          String   @id @default(cuid())
  name        String
  description String
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  email       String
  phone       String
  website     String?
  images      String[]
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  amenities   String[] // Stored as JSON array of amenity codes
  totalSeats  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  admin             User               @relation("LibraryAdmin", fields: [adminId], references: [id])
  adminId           String             @unique
  staff             LibraryStaff[]
  openingHours      OpeningHour[]
  membershipPlans   MembershipPlan[]
  memberships       Membership[]
  seats             Seat[]
  seatBookings      SeatBooking[]
  physicalBooks     PhysicalBook[]
  bookBorrowings    BookBorrowing[]
  events            Event[]
  announcements     Announcement[]
  maintenanceRecords MaintenanceRecord[]
  reviews           Review[]

  @@map("libraries")
}

model LibraryStaff {
  id         String   @id @default(cuid())
  position   String
  joinedAt   DateTime @default(now())
  isActive   Boolean  @default(true)
  
  // Relationships
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  library    Library  @relation(fields: [libraryId], references: [id])
  libraryId  String

  @@unique([userId, libraryId])
  @@map("library_staff")
}

model OpeningHour {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  openTime  String   // Format: "HH:MM"
  closeTime String   // Format: "HH:MM"
  isClosed  Boolean  @default(false)
  
  // Relationships
  library   Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  libraryId String

  @@unique([libraryId, dayOfWeek])
  @@map("opening_hours")
}

// Membership Plans
model MembershipPlan {
  id                     String   @id @default(cuid())
  name                   String
  description            String
  price                  Float
  duration               Int      // in days
  features               String[] // Stored as JSON array
  allowedBookingsPerMonth Int
  eLibraryAccess         Boolean  @default(false)
  maxBorrowedBooks       Int      @default(0)
  maxBorrowDuration      Int      @default(0) // in days
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  // Relationships
  library     Library     @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  libraryId   String
  memberships Membership[]

  @@map("membership_plans")
}

// User Memberships
model Membership {
  id        String           @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  status    MembershipStatus @default(ACTIVE)
  autoRenew Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  // Relationships
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  library         Library        @relation(fields: [libraryId], references: [id])
  libraryId       String
  membershipPlan  MembershipPlan @relation(fields: [membershipPlanId], references: [id])
  membershipPlanId String
  payments        Payment[]

  @@map("memberships")
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  PENDING
  CANCELLED
}

// Seats in libraries
model Seat {
  id          String   @id @default(cuid())
  name        String
  type        SeatType @default(REGULAR)
  isAvailable Boolean  @default(true)
  floor       Int      @default(1)
  section     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  library     Library      @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  libraryId   String
  bookings    SeatBooking[]

  @@map("seats")
}

enum SeatType {
  REGULAR
  QUIET_ZONE
  COMPUTER
  STUDY_ROOM
  GROUP_TABLE
}

// Seat bookings
model SeatBooking {
  id          String        @id @default(cuid())
  date        DateTime
  startTime   String        // Format: "HH:MM"
  endTime     String        // Format: "HH:MM"
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relationships
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  seat        Seat          @relation(fields: [seatId], references: [id])
  seatId      String
  library     Library       @relation(fields: [libraryId], references: [id])
  libraryId   String
  payment     Payment?

  @@map("seat_bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

// Physical Books
model PhysicalBook {
  id            String   @id @default(cuid())
  title         String
  author        String
  isbn          String?
  coverImage    String?
  description   String?
  publishedYear Int?
  publisher     String?
  pageCount     Int?
  language      String   @default("English")
  genre         String[]
  tags          String[]
  location      String?  // Shelf/section in the library
  status        BookStatus @default(AVAILABLE)
  condition     BookCondition @default(GOOD)
  acquisitionDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  library       Library        @relation(fields: [libraryId], references: [id])
  libraryId     String
  category      BookCategory   @relation(fields: [categoryId], references: [id])
  categoryId    String
  borrowings    BookBorrowing[]
  reviews       Review[]

  @@map("physical_books")
}

enum BookStatus {
  AVAILABLE
  BORROWED
  RESERVED
  MAINTENANCE
  LOST
}

enum BookCondition {
  NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
}

// E-Books
model EBook {
  id            String   @id @default(cuid())
  title         String
  author        String
  isbn          String?
  coverImage    String?
  description   String?
  publishedYear Int?
  publisher     String?
  pageCount     Int?
  language      String   @default("English")
  genre         String[]
  tags          String[]
  fileUrl       String
  fileFormat    String
  fileSize      Int      // in KB
  isPremium     Boolean  @default(false)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  category      BookCategory   @relation(fields: [categoryId], references: [id])
  categoryId    String
  accesses      EBookAccess[]
  reviews       Review[]
  readingHistory ReadingHistory[]
  bookmarks     Bookmark[]
  notes         Note[]

  @@map("ebooks")
}

// Book Categories
model BookCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  physicalBooks PhysicalBook[]
  eBooks        EBook[]

  @@map("book_categories")
}

// Book Borrowings (Physical Books)
model BookBorrowing {
  id            String         @id @default(cuid())
  borrowDate    DateTime
  dueDate       DateTime
  returnDate    DateTime?
  status        BorrowingStatus @default(BORROWED)
  penalty       Float?         // Amount in currency
  penaltyPaid   Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relationships
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  book          PhysicalBook   @relation(fields: [bookId], references: [id])
  bookId        String
  library       Library        @relation(fields: [libraryId], references: [id])
  libraryId     String
  payments      Payment[]      // For penalty payments

  @@map("book_borrowings")
}

enum BorrowingStatus {
  BORROWED
  RETURNED
  OVERDUE
  LOST
}

// E-Book Access
model EBookAccess {
  id            String   @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  eBook         EBook    @relation(fields: [eBookId], references: [id])
  eBookId       String
  payment       Payment?

  @@map("ebook_accesses")
}

// Reading History
model ReadingHistory {
  id            String   @id @default(cuid())
  startDate     DateTime
  lastReadDate  DateTime
  lastReadPage  Int
  totalPages    Int
  isCompleted   Boolean  @default(false)
  completedDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  eBook         EBook    @relation(fields: [eBookId], references: [id])
  eBookId       String

  @@map("reading_history")
}

// Bookmarks
model Bookmark {
  id            String   @id @default(cuid())
  page          Int
  position      String?  // Position on page if applicable
  title         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  eBook         EBook    @relation(fields: [eBookId], references: [id])
  eBookId       String

  @@map("bookmarks")
}

// Notes
model Note {
  id            String   @id @default(cuid())
  page          Int
  content       String
  color         String?  // For highlighting color
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  eBook         EBook    @relation(fields: [eBookId], references: [id])
  eBookId       String

  @@map("notes")
}

// Forum Categories
model ForumCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  posts       ForumPost[]

  @@map("forum_categories")
}

// Forum Posts
model ForumPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  category    ForumCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  comments    ForumComment[]

  @@map("forum_posts")
}

// Forum Comments
model ForumComment {
  id          String   @id @default(cuid())
  content     String
  likeCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  post        ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String

  @@map("forum_comments")
}

// Study Sessions
model StudySession {
  id          String   @id @default(cuid())
  date        DateTime
  startTime   String   // Format: "HH:MM"
  endTime     String   // Format: "HH:MM"
  duration    Int      // in minutes
  subject     String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("study_sessions")
}

// Tasks
model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id])
  userId      String

  @@map("tasks")
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// Habits
model Habit {
  id                String         @id @default(cuid())
  title             String
  description       String?
  frequency         HabitFrequency @default(DAILY)
  timeOfDay         TimeOfDay      @default(MORNING)
  streak            Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relationships
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  completionHistory HabitCompletion[]

  @@map("habits")
}

enum HabitFrequency {
  DAILY
  WEEKDAYS
  WEEKLY
}

enum TimeOfDay {
  MORNING
  AFTERNOON
  EVENING
}

// Habit Completion History
model HabitCompletion {
  id        String   @id @default(cuid())
  date      DateTime
  completed Boolean  @default(false)
  
  // Relationships
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId   String

  @@unique([habitId, date])
  @@map("habit_completions")
}

// Study Streak
model StudyStreak {
  id              String   @id @default(cuid())
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  totalStudyDays  Int      @default(0)
  totalStudyHours Float    @default(0)
  dailyGoalHours  Float    @default(2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  streakHistory   StreakHistory[]

  @@map("study_streaks")
}

// Streak History
model StreakHistory {
  id        String   @id @default(cuid())
  date      DateTime
  hours     Float
  goalMet   Boolean  @default(false)
  
  // Relationships
  streak    StudyStreak @relation(fields: [streakId], references: [id], onDelete: Cascade)
  streakId  String

  @@unique([streakId, date])
  @@map("streak_history")
}

// Events
model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String?
  isPublic    Boolean  @default(true)
  maxAttendees Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  library     Library  @relation(fields: [libraryId], references: [id])
  libraryId   String

  @@map("events")
}

// Announcements
model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  isPublic    Boolean  @default(true)
  isPinned    Boolean  @default(false)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  library     Library  @relation(fields: [libraryId], references: [id])
  libraryId   String

  @@map("announcements")
}

// Notifications
model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType @default(INFO)
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  
  // Relationships
  user        User             @relation(fields: [userId], references: [id])
  userId      String

  @@map("notifications")
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

// Payments
model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("INR")
  type          PaymentType
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  receiptUrl    String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relationships
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  membership    Membership?   @relation(fields: [membershipId], references: [id])
  membershipId  String?
  seatBooking   SeatBooking?  @relation(fields: [seatBookingId], references: [id])
  seatBookingId String?       @unique
  bookBorrowing BookBorrowing? @relation(fields: [bookBorrowingId], references: [id])
  bookBorrowingId String?
  eBookAccess   EBookAccess?  @relation(fields: [eBookAccessId], references: [id])
  eBookAccessId String?       @unique

  @@map("payments")
}

enum PaymentType {
  MEMBERSHIP
  SEAT_BOOKING
  PENALTY
  EBOOK_PURCHASE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Maintenance Records
model MaintenanceRecord {
  id          String   @id @default(cuid())
  title       String
  description String
  status      MaintenanceStatus @default(PENDING)
  priority    MaintenancePriority @default(MEDIUM)
  scheduledDate DateTime?
  completedDate DateTime?
  cost        Float?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  library     Library  @relation(fields: [libraryId], references: [id])
  libraryId   String

  @@map("maintenance_records")
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Reviews
model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  library     Library? @relation(fields: [libraryId], references: [id])
  libraryId   String?
  physicalBook PhysicalBook? @relation(fields: [physicalBookId], references: [id])
  physicalBookId String?
  eBook       EBook?   @relation(fields: [eBookId], references: [id])
  eBookId     String?

  @@map("reviews")
}
